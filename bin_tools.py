from tqdm import tqdm
import bisect
import re

from token_tools import ICE_CHARS
binsub_pattern = re.compile(r'[^a-zA-Z{}]'.format(ICE_CHARS))

def bin2list(in_path:str, out_path:str):
    '''
    Save a lower-case only version of all cases of all words
    in the BIN index.

    Input arguments:
    * in_path (string): A path to the BIN index
    * out_path (string): A target path to save the formatted
    index
    '''
    with open(in_path) as i_f, open(out_path, 'w') as o_f:
        for line in tqdm(i_f, total=6309315):
            o_f.write(f'{line.split(";")[4].lower()}\n')

def bin_verify(bin_path:str, in_path:str, out_path:str, bad_path:str):
    '''
    Input arguments:
    * bin_path (string): A path to the index generated by bin2list
    * in_path (string): A path to an utterance list
    * out_path (string): A target path to save the filtered
        utterance list
    * bad_path (string): A target path to save the utterances that
        include words not found in the BIN list
    '''
    bin_words = []
    with open(bin_path) as i_f:
        for line in tqdm(i_f, total=6309315):
            bin_words.append(line.strip())

    with open(in_path) as i_f, open(out_path, 'w') as o_f, \
        open(bad_path, 'w') as b_f:
        for line in i_f:
            words = line.split('\t')[0].strip().lower().split()
            valid = True
            for word in words:
                word = re.sub(binsub_pattern, '', word)
                i = bisect.bisect_left(bin_words, word)
                if i == len(words) or bin_words[i] != word:
                    # word not in BIN
                    b_f.write(f'{" ".join(words)}\tBIN-{word}-{i}\n')
                    valid = False
                    break
            if valid:
                o_f.write(line)

def sortb(bin_path:str, out_path):
    '''
    '''
    words = []
    with open(bin_path) as i_f:
        for line in tqdm(i_f, total=6309315):
            words.append(line.strip())

    words = sorted(words)
    with open(out_path, 'w') as o_f:
        for w in words:
            o_f.write(f'{w}\n')